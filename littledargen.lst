Microsoft (R) Macro Assembler Version 14.29.30136.0	    01/19/22 13:13:52
main.asm						     Page 1 - 1


				; 小方塊
				; 主要連串方式：
				; main -> rule（介紹遊戲規則的畫面， line78~line94）
				;      -> selectDefc（選擇遊戲難度
				;      -> game（主要遊戲）
				;			-> 由 gamecontinue 判斷遊戲是否要持續進行
				;			-> 使用 appearTreeA、appearTreeB 來判斷畫面上有何種樹生成
				;			-> 使用 readkey 來接收鍵盤按鍵，並判斷是否是空格
				;			-> 若是空格的話那小方塊先往上一次，並進入 loopprint 繼續其他動作
				;			-> loopprint 主要是重複印出地板以做出動畫效果，另有其他功能在下面的註解
				;			-> 將 eax 設成 0 是為了重製，接著判斷遊戲是否要結束（小方塊有沒有撞到
				;			-> 呼叫分數設定，並再一次判斷是不是需要回去
				;      -> endgame（遊戲結束後的畫面，以及是否繼續遊戲的按鍵監聽（部分在 main 內）
				;			-> 先將除了分數以外的其他設定全部重製
				;			-> 將分數印出來後再將分數重製為 0
				;			-> 印出結束的畫面，並詢問是否需要再次遊戲

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

 00000030			Tree1 STRUCT
 00000000  00000001 [			line1 BYTE "   /\  ", 0
	    20 20 20 2F
	    5C 20 20 00
	   ]
 00000008  00000001 [			line2 BYTE "  /  \  ", 0
	    20 20 2F 20
	    20 5C 20 20
	    00
	   ]
 00000011  00000001 [			line3 BYTE " /    \  ", 0
	    20 2F 20 20
	    20 20 5C 20
	    20 00
	   ]
 0000001B  00000001 [			line4 BYTE "/______\  ", 0
	    2F 5F 5F 5F
	    5F 5F 5F 5C
	    20 20 00
	   ]
 00000026  00000001 [			line5 BYTE "___||___", 0
	    5F 5F 5F 7C
	    7C 5F 5F 5F
	    00
	   ]
 0000002F  4B				linex BYTE 75
				Tree1 ENDS
 00000015			Tree2 STRUCT
 00000000  00000001 [			line1 BYTE "  /\ ", 0
	    20 20 2F 5C
	    20 00
	   ]
 00000006  00000001 [			line2 BYTE " /__\ ", 0
	    20 2F 5F 5F
	    5C 20 00
	   ]
 0000000D  00000001 [			line3 BYTE "__||__", 0
	    5F 5F 7C 7C
	    5F 5F 00
	   ]
 00000014  53				linex BYTE 83
				Tree2 ENDS

 00000000			.data
 00000000 2A 2A 2A 2A 2A	beginbackground1 BYTE "******************************************************************************************",0DH,0AH,0
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   0D 0A 00
 0000005D 2A 20 20 20 20	beginbackground2 BYTE "*                                                                                        *",0DH,0AH,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   0D 0A 00
 000000BA 2A 20 5F 5F 5F	underground1 BYTE "* ______________________________________________________________________________________ *",0DH,0AH,0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 20 2A
	   0D 0A 00
 00000117 2A 20 20 20 20	underground2_1 BYTE "*      ---     ---     ---     ----     ---     --     ----     ---     --     ---    -- *",0DH,0AH,0
	   20 20 2D 2D 2D
	   20 20 20 20 20
	   2D 2D 2D 20 20
	   20 20 20 2D 2D
	   2D 20 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 20
	   2D 2D 2D 20 20
	   20 20 20 2D 2D
	   20 20 20 20 20
	   2D 2D 2D 2D 20
	   20 20 20 20 2D
	   2D 2D 20 20 20
	   20 20 2D 2D 20
	   20 20 20 20 2D
	   2D 2D 20 20 20
	   20 2D 2D 20 2A
	   0D 0A 00
 00000174 2A 20 20 20 20	underground2_2 BYTE "*    ---     ---     ---     ----     ---     --     ----     ---     --     ---    --   *",0DH,0AH,0
	   2D 2D 2D 20 20
	   20 20 20 2D 2D
	   2D 20 20 20 20
	   20 2D 2D 2D 20
	   20 20 20 20 2D
	   2D 2D 2D 20 20
	   20 20 20 2D 2D
	   2D 20 20 20 20
	   20 2D 2D 20 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 20 2D 2D 2D
	   20 20 20 20 20
	   2D 2D 20 20 20
	   20 20 2D 2D 2D
	   20 20 20 20 2D
	   2D 20 20 20 2A
	   0D 0A 00
 000001D1 2A 20 20 2D 2D	underground2_3 BYTE "*  ---     ---     ---     ----     ---     --     ----     ---     --     ---    --   - *",0DH,0AH,0
	   2D 20 20 20 20
	   20 2D 2D 2D 20
	   20 20 20 20 2D
	   2D 2D 20 20 20
	   20 20 2D 2D 2D
	   2D 20 20 20 20
	   20 2D 2D 2D 20
	   20 20 20 20 2D
	   2D 20 20 20 20
	   20 2D 2D 2D 2D
	   20 20 20 20 20
	   2D 2D 2D 20 20
	   20 20 20 2D 2D
	   20 20 20 20 20
	   2D 2D 2D 20 20
	   20 20 2D 2D 20
	   20 20 2D 20 2A
	   0D 0A 00
 0000022E 2A 20 2D 2D 20	underground2_4 BYTE "* --     ---     ---     ----     ---     --     ----     ---     --     ---    --    -- *",0DH,0AH,0
	   20 20 20 20 2D
	   2D 2D 20 20 20
	   20 20 2D 2D 2D
	   20 20 20 20 20
	   2D 2D 2D 2D 20
	   20 20 20 20 2D
	   2D 2D 20 20 20
	   20 20 2D 2D 20
	   20 20 20 20 2D
	   2D 2D 2D 20 20
	   20 20 20 2D 2D
	   2D 20 20 20 20
	   20 2D 2D 20 20
	   20 20 20 2D 2D
	   2D 20 20 20 20
	   2D 2D 20 20 20
	   20 2D 2D 20 2A
	   0D 0A 00
 0000028B 2A 20 2D 20 20	underground2_5 BYTE "* -     ---     ---     ----     ---     --     ----     ---     --     ---    --    --- *",0DH,0AH,0
	   20 20 20 2D 2D
	   2D 20 20 20 20
	   20 2D 2D 2D 20
	   20 20 20 20 2D
	   2D 2D 2D 20 20
	   20 20 20 2D 2D
	   2D 20 20 20 20
	   20 2D 2D 20 20
	   20 20 20 2D 2D
	   2D 2D 20 20 20
	   20 20 2D 2D 2D
	   20 20 20 20 20
	   2D 2D 20 20 20
	   20 20 2D 2D 2D
	   20 20 20 20 2D
	   2D 20 20 20 20
	   2D 2D 2D 20 2A
	   0D 0A 00
 000002E8 50 72 65 73 73	beginmessenge1 BYTE "Press ",34,"space",34," To Control the little diamond, enjoy!",0
	   20 22 73 70 61
	   63 65 22 20 54
	   6F 20 43 6F 6E
	   74 72 6F 6C 20
	   74 68 65 20 6C
	   69 74 74 6C 65
	   20 64 69 61 6D
	   6F 6E 64 2C 20
	   65 6E 6A 6F 79
	   21 00
 0000031C 01			gamecontinue BYTE 1
 0000031D  00000001 [		treeA Tree1 <>
	    20205C2F202020
	    00
	   ]
	   00000001 [
	    20205C20202F2020
	    00
	   ]
	   00000001 [
	    20205C202020202F20
	    00
	   ]
	   00000001 [
	    20205C5F5F5F5F5F5F2F
	    00
	   ]
	   00000001 [
	    5F5F5F7C7C5F5F5F
	    00
	   ] 4B
 0000034D  00000001 [		treeB Tree2 <>
	    205C2F2020 00
	   ]
	   00000001 [
	    205C5F5F2F20
	    00
	   ]
	   00000001 [
	    5F5F7C7C5F5F
	    00
	   ] 53
 00000362 00			appearTreeA BYTE 0    ; TreeA appear if set
 00000363 00			appearTreeB BYTE 0    ; TreeB appear if set
 00000364 16			diamondX BYTE 22    ; diamond x cood
 00000365 0E			diamondY BYTE 14    ; diamond y cood
 00000366 00			diamondD BYTE 0    ;diamond come down if set
 00000367 01			diamondU BYTE 1    ;diamond come up if set
 00000368 00			ifmovdiamond BYTE 0
 00000369 3C 3E 00		diamond BYTE "<>", 0
 0000036C 00			tmp BYTE ?    ; just temp
 0000036D 00000000		score DWORD 0    ; your score
 00000371 00			movcount BYTE 0
 00000372 00000000		delayTime DWORD ?
 00000376 00			distanceCheck BYTE 0

 00000000			.code
 00000000			main PROC
 00000000				g:
 00000000  E8 00000075			call rule
 00000005  E8 00000000 E		call Clrscr
 0000000A  E8 000000F2			call selectDefc
 0000000F  E8 00000000 E		call Clrscr
 00000014  E8 0000029B			call game 
 00000019  E8 0000039E			call endgame
					.WHILE 1
						.IF al=="Y" || al=="y"
 00000026  E8 00000000 E				call Clrscr
 0000002B  EB D3					jmp g
						.ELSE
							.IF al=="N" || al=="n"
								mGotoXY 27, 9
 00000037  52		     1		push edx
 00000038  B6 09	     1		mov  dh,9
 0000003A  B2 1B	     1		mov  dl,27
 0000003C  E8 00000000 E     1		call Gotoxy
 00000041  5A		     1		pop  edx
								mwrite " <  OK, byebye, have a nice day~  >"
 00000377		     1		.data		
 00000377 20 3C 20 20 4F     1		??0000 BYTE " <  OK, byebye, have a nice day~  >",0	
	   4B 2C 20 62 79
	   65 62 79 65 2C
	   20 68 61 76 65
	   20 61 20 6E 69
	   63 65 20 64 61
	   79 7E 20 20 3E
	   00
 00000042		     1		.code
 00000042  52		     1		push	edx
 00000043  BA 00000377 R     1		mov	edx,OFFSET ??0000
 00000048  E8 00000000 E     1		call	WriteString
 0000004D  5A		     1		pop	edx
								mGotoXY 0, 17
 0000004E  52		     1		push edx
 0000004F  B6 11	     1		mov  dh,17
 00000051  B2 00	     1		mov  dl,0
 00000053  E8 00000000 E     1		call Gotoxy
 00000058  5A		     1		pop  edx
 00000059  B8 000007D0						mov eax, 2000
 0000005E  E8 00000000 E					call delay
								exit
								.ELSE
 0000006C  E8 00000000 E						call readkey    
									; 強制他們要輸入 y 或是 n 來結束
									;也算是避免遊戲中途按太多鍵到 buffer 導致遊戲錯誤未依照使用者意願停下
							.ENDIF
						.ENDIF
					.ENDW
					exit
 0000007A			main ENDP

 0000007A			rule PROC
 0000007A  E8 000006F3			call printBackground
 0000007F  E8 000005B0			call printTreeA
 00000084  E8 0000069D			call printTreeB
					mGotoXY 35, 3
 00000089  52		     1		push edx
 0000008A  B6 03	     1		mov  dh,3
 0000008C  B2 23	     1		mov  dl,35
 0000008E  E8 00000000 E     1		call Gotoxy
 00000093  5A		     1		pop  edx
					mwrite ">--------------------------<"
 0000039B		     1		.data		
 0000039B 3E 2D 2D 2D 2D     1		??0001 BYTE ">--------------------------<",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 3C 00
 00000094		     1		.code
 00000094  52		     1		push	edx
 00000095  BA 0000039B R     1		mov	edx,OFFSET ??0001
 0000009A  E8 00000000 E     1		call	WriteString
 0000009F  5A		     1		pop	edx
					mGotoXY 35, 4
 000000A0  52		     1		push edx
 000000A1  B6 04	     1		mov  dh,4
 000000A3  B2 23	     1		mov  dl,35
 000000A5  E8 00000000 E     1		call Gotoxy
 000000AA  5A		     1		pop  edx
					mwrite ">    The Little diamond    <"
 000003B8		     1		.data		
 000003B8 3E 20 20 20 20     1		??0002 BYTE ">    The Little diamond    <",0	
	   54 68 65 20 4C
	   69 74 74 6C 65
	   20 64 69 61 6D
	   6F 6E 64 20 20
	   20 20 3C 00
 000000AB		     1		.code
 000000AB  52		     1		push	edx
 000000AC  BA 000003B8 R     1		mov	edx,OFFSET ??0002
 000000B1  E8 00000000 E     1		call	WriteString
 000000B6  5A		     1		pop	edx
					mGotoXY 35, 5
 000000B7  52		     1		push edx
 000000B8  B6 05	     1		mov  dh,5
 000000BA  B2 23	     1		mov  dl,35
 000000BC  E8 00000000 E     1		call Gotoxy
 000000C1  5A		     1		pop  edx
					mwrite ">--------------------------<"
 000003D5		     1		.data		
 000003D5 3E 2D 2D 2D 2D     1		??0003 BYTE ">--------------------------<",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 3C 00
 000000C2		     1		.code
 000000C2  52		     1		push	edx
 000000C3  BA 000003D5 R     1		mov	edx,OFFSET ??0003
 000000C8  E8 00000000 E     1		call	WriteString
 000000CD  5A		     1		pop	edx
					mGotoXY 22, 10
 000000CE  52		     1		push edx
 000000CF  B6 0A	     1		mov  dh,10
 000000D1  B2 16	     1		mov  dl,22
 000000D3  E8 00000000 E     1		call Gotoxy
 000000D8  5A		     1		pop  edx
					mwrite "Press 'space' To Control the little diamond, enjoy!"
 000003F2		     1		.data		
 000003F2 50 72 65 73 73     1		??0004 BYTE "Press 'space' To Control the little diamond, enjoy!",0	
	   20 27 73 70 61
	   63 65 27 20 54
	   6F 20 43 6F 6E
	   74 72 6F 6C 20
	   74 68 65 20 6C
	   69 74 74 6C 65
	   20 64 69 61 6D
	   6F 6E 64 2C 20
	   65 6E 6A 6F 79
	   21 00
 000000D9		     1		.code
 000000D9  52		     1		push	edx
 000000DA  BA 000003F2 R     1		mov	edx,OFFSET ??0004
 000000DF  E8 00000000 E     1		call	WriteString
 000000E4  5A		     1		pop	edx
					mGotoXY 32, 12
 000000E5  52		     1		push edx
 000000E6  B6 0C	     1		mov  dh,12
 000000E8  B2 20	     1		mov  dl,32
 000000EA  E8 00000000 E     1		call Gotoxy
 000000EF  5A		     1		pop  edx
 000000F0  E8 00000000 E		call WaitMsg
					mGotoXY 0, 17
 000000F5  52		     1		push edx
 000000F6  B6 11	     1		mov  dh,17
 000000F8  B2 00	     1		mov  dl,0
 000000FA  E8 00000000 E     1		call Gotoxy
 000000FF  5A		     1		pop  edx
 00000100  C3				ret
 00000101			rule ENDP

 00000101			selectDefc PROC
 00000101  E8 0000066C		    call printBackground
 00000106  E8 00000529		    call printTreeA
 0000010B  E8 00000616		    call printTreeB
				    mGotoXY 20, 3
 00000110  52		     1		push edx
 00000111  B6 03	     1		mov  dh,3
 00000113  B2 14	     1		mov  dl,20
 00000115  E8 00000000 E     1		call Gotoxy
 0000011A  5A		     1		pop  edx
				    mwrite ">---------------------------------------------------<"
 00000426		     1		.data		
 00000426 3E 2D 2D 2D 2D     1		??0005 BYTE ">---------------------------------------------------<",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 3C 00
 0000011B		     1		.code
 0000011B  52		     1		push	edx
 0000011C  BA 00000426 R     1		mov	edx,OFFSET ??0005
 00000121  E8 00000000 E     1		call	WriteString
 00000126  5A		     1		pop	edx
				    mGotoXY 20, 4
 00000127  52		     1		push edx
 00000128  B6 04	     1		mov  dh,4
 0000012A  B2 14	     1		mov  dl,20
 0000012C  E8 00000000 E     1		call Gotoxy
 00000131  5A		     1		pop  edx
				    mwrite "> Choose from three different levels of difficulty: <"
 0000045C		     1		.data		
 0000045C 3E 20 43 68 6F     1		??0006 BYTE "> Choose from three different levels of difficulty: <",0	
	   6F 73 65 20 66
	   72 6F 6D 20 74
	   68 72 65 65 20
	   64 69 66 66 65
	   72 65 6E 74 20
	   6C 65 76 65 6C
	   73 20 6F 66 20
	   64 69 66 66 69
	   63 75 6C 74 79
	   3A 20 3C 00
 00000132		     1		.code
 00000132  52		     1		push	edx
 00000133  BA 0000045C R     1		mov	edx,OFFSET ??0006
 00000138  E8 00000000 E     1		call	WriteString
 0000013D  5A		     1		pop	edx
				    mGotoXY 20, 6
 0000013E  52		     1		push edx
 0000013F  B6 06	     1		mov  dh,6
 00000141  B2 14	     1		mov  dl,20
 00000143  E8 00000000 E     1		call Gotoxy
 00000148  5A		     1		pop  edx
				    mwrite ">               Simple mode: press 'S'              <"
 00000492		     1		.data		
 00000492 3E 20 20 20 20     1		??0007 BYTE ">               Simple mode: press 'S'              <",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 53 69 6D 70
	   6C 65 20 6D 6F
	   64 65 3A 20 70
	   72 65 73 73 20
	   27 53 27 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 3C 00
 00000149		     1		.code
 00000149  52		     1		push	edx
 0000014A  BA 00000492 R     1		mov	edx,OFFSET ??0007
 0000014F  E8 00000000 E     1		call	WriteString
 00000154  5A		     1		pop	edx
				    mGotoXY 20, 7
 00000155  52		     1		push edx
 00000156  B6 07	     1		mov  dh,7
 00000158  B2 14	     1		mov  dl,20
 0000015A  E8 00000000 E     1		call Gotoxy
 0000015F  5A		     1		pop  edx
				    mwrite ">               Normal mode: press 'N'              <"
 000004C8		     1		.data		
 000004C8 3E 20 20 20 20     1		??0008 BYTE ">               Normal mode: press 'N'              <",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 4E 6F 72 6D
	   61 6C 20 6D 6F
	   64 65 3A 20 70
	   72 65 73 73 20
	   27 4E 27 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 3C 00
 00000160		     1		.code
 00000160  52		     1		push	edx
 00000161  BA 000004C8 R     1		mov	edx,OFFSET ??0008
 00000166  E8 00000000 E     1		call	WriteString
 0000016B  5A		     1		pop	edx
				    mGotoXY 20, 8
 0000016C  52		     1		push edx
 0000016D  B6 08	     1		mov  dh,8
 0000016F  B2 14	     1		mov  dl,20
 00000171  E8 00000000 E     1		call Gotoxy
 00000176  5A		     1		pop  edx
				    mwrite ">                Hard mode: press 'H'               <"
 000004FE		     1		.data		
 000004FE 3E 20 20 20 20     1		??0009 BYTE ">                Hard mode: press 'H'               <",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 48 61 72
	   64 20 6D 6F 64
	   65 3A 20 70 72
	   65 73 73 20 27
	   48 27 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 3C 00
 00000177		     1		.code
 00000177  52		     1		push	edx
 00000178  BA 000004FE R     1		mov	edx,OFFSET ??0009
 0000017D  E8 00000000 E     1		call	WriteString
 00000182  5A		     1		pop	edx
				    mGotoXY 20, 9
 00000183  52		     1		push edx
 00000184  B6 09	     1		mov  dh,9
 00000186  B2 14	     1		mov  dl,20
 00000188  E8 00000000 E     1		call Gotoxy
 0000018D  5A		     1		pop  edx
				    mwrite ">---------------------------------------------------<"
 00000534		     1		.data		
 00000534 3E 2D 2D 2D 2D     1		??000A BYTE ">---------------------------------------------------<",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 3C 00
 0000018E		     1		.code
 0000018E  52		     1		push	edx
 0000018F  BA 00000534 R     1		mov	edx,OFFSET ??000A
 00000194  E8 00000000 E     1		call	WriteString
 00000199  5A		     1		pop	edx
 0000019A			    C1:
 0000019A  E8 00000000 E	        call readchar
 0000019F  8B C8		        mov ecx, eax
				        .IF al=="S" || al=="s"
 000001A9  B8 00000064		            mov eax, 100
 000001AE  A3 00000372 R	            mov delayTime, eax
 000001B3  8B C1		            mov eax, ecx
				        .ELSEIF al=="N" || al=="n"
 000001BF  B8 00000032		            mov eax, 50
 000001C4  A3 00000372 R	            mov delayTime, eax
 000001C9  8B C1		            mov eax, ecx
				        .ELSEIF al=="H" || al=="h"
 000001D5  B8 00000014		            mov eax, 20
 000001DA  A3 00000372 R	            mov delayTime, eax
 000001DF  8B C1		            mov eax, ecx
				        .ELSE
 000001E3  EB B5		            jmp C1
				        .ENDIF

				    mGotoXY 20, 5
 000001E5  52		     1		push edx
 000001E6  B6 05	     1		mov  dh,5
 000001E8  B2 14	     1		mov  dl,20
 000001EA  E8 00000000 E     1		call Gotoxy
 000001EF  5A		     1		pop  edx
				    mwrite ">                                                   <"
 0000056A		     1		.data		
 0000056A 3E 20 20 20 20     1		??000B BYTE ">                                                   <",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 3C 00
 000001F0		     1		.code
 000001F0  52		     1		push	edx
 000001F1  BA 0000056A R     1		mov	edx,OFFSET ??000B
 000001F6  E8 00000000 E     1		call	WriteString
 000001FB  5A		     1		pop	edx
				    mGotoXY 20, 6
 000001FC  52		     1		push edx
 000001FD  B6 06	     1		mov  dh,6
 000001FF  B2 14	     1		mov  dl,20
 00000201  E8 00000000 E     1		call Gotoxy
 00000206  5A		     1		pop  edx
				    mwrite ">          Your choice is:                          <"
 000005A0		     1		.data		
 000005A0 3E 20 20 20 20     1		??000C BYTE ">          Your choice is:                          <",0	
	   20 20 20 20 20
	   20 59 6F 75 72
	   20 63 68 6F 69
	   63 65 20 69 73
	   3A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 3C 00
 00000207		     1		.code
 00000207  52		     1		push	edx
 00000208  BA 000005A0 R     1		mov	edx,OFFSET ??000C
 0000020D  E8 00000000 E     1		call	WriteString
 00000212  5A		     1		pop	edx
				    mGotoXY 50, 6
 00000213  52		     1		push edx
 00000214  B6 06	     1		mov  dh,6
 00000216  B2 32	     1		mov  dl,50
 00000218  E8 00000000 E     1		call Gotoxy
 0000021D  5A		     1		pop  edx

				    .IF al=="N" || al=="n"
				        mwrite "Normal mode"
 000005D6		     1		.data		
 000005D6 4E 6F 72 6D 61     1		??000D BYTE "Normal mode",0	
	   6C 20 6D 6F 64
	   65 00
 00000226		     1		.code
 00000226  52		     1		push	edx
 00000227  BA 000005D6 R     1		mov	edx,OFFSET ??000D
 0000022C  E8 00000000 E     1		call	WriteString
 00000231  5A		     1		pop	edx
				    .ELSEIF al=="S" || al=="s"
				        mwrite "Simple mode"
 000005E2		     1		.data		
 000005E2 53 69 6D 70 6C     1		??000E BYTE "Simple mode",0	
	   65 20 6D 6F 64
	   65 00
 0000023C		     1		.code
 0000023C  52		     1		push	edx
 0000023D  BA 000005E2 R     1		mov	edx,OFFSET ??000E
 00000242  E8 00000000 E     1		call	WriteString
 00000247  5A		     1		pop	edx
				    .ELSEIF al=="H" || al=="h"
				        mwrite "Hard mode"
 000005EE		     1		.data		
 000005EE 48 61 72 64 20     1		??000F BYTE "Hard mode",0	
	   6D 6F 64 65 00
 00000252		     1		.code
 00000252  52		     1		push	edx
 00000253  BA 000005EE R     1		mov	edx,OFFSET ??000F
 00000258  E8 00000000 E     1		call	WriteString
 0000025D  5A		     1		pop	edx
				    .ENDIF
				        

				    mGotoXY 20, 7
 0000025E  52		     1		push edx
 0000025F  B6 07	     1		mov  dh,7
 00000261  B2 14	     1		mov  dl,20
 00000263  E8 00000000 E     1		call Gotoxy
 00000268  5A		     1		pop  edx
				    mwrite ">                                                   <"
 000005F8		     1		.data		
 000005F8 3E 20 20 20 20     1		??0010 BYTE ">                                                   <",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 3C 00
 00000269		     1		.code
 00000269  52		     1		push	edx
 0000026A  BA 000005F8 R     1		mov	edx,OFFSET ??0010
 0000026F  E8 00000000 E     1		call	WriteString
 00000274  5A		     1		pop	edx
				    mGotoXY 20, 8
 00000275  52		     1		push edx
 00000276  B6 08	     1		mov  dh,8
 00000278  B2 14	     1		mov  dl,20
 0000027A  E8 00000000 E     1		call Gotoxy
 0000027F  5A		     1		pop  edx
				    mwrite ">---------------------------------------------------<"
 0000062E		     1		.data		
 0000062E 3E 2D 2D 2D 2D     1		??0011 BYTE ">---------------------------------------------------<",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 3C 00
 00000280		     1		.code
 00000280  52		     1		push	edx
 00000281  BA 0000062E R     1		mov	edx,OFFSET ??0011
 00000286  E8 00000000 E     1		call	WriteString
 0000028B  5A		     1		pop	edx
				    mGotoXY 20, 9
 0000028C  52		     1		push edx
 0000028D  B6 09	     1		mov  dh,9
 0000028F  B2 14	     1		mov  dl,20
 00000291  E8 00000000 E     1		call Gotoxy
 00000296  5A		     1		pop  edx
					mwrite "                                                     "
 00000664		     1		.data		
 00000664 20 20 20 20 20     1		??0012 BYTE "                                                     ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000297		     1		.code
 00000297  52		     1		push	edx
 00000298  BA 00000664 R     1		mov	edx,OFFSET ??0012
 0000029D  E8 00000000 E     1		call	WriteString
 000002A2  5A		     1		pop	edx
					mGotoXY 20, 9
 000002A3  52		     1		push edx
 000002A4  B6 09	     1		mov  dh,9
 000002A6  B2 14	     1		mov  dl,20
 000002A8  E8 00000000 E     1		call Gotoxy
 000002AD  5A		     1		pop  edx
 000002AE  E8 00000000 E	    call WaitMsg
 000002B3  C3			    ret
 000002B4			selectDefc ENDP


 000002B4			game PROC
 000002B4  E8 000004B9			call printBackground
					mGotoXY 73 , 1
 000002B9  52		     1		push edx
 000002BA  B6 01	     1		mov  dh,1
 000002BC  B2 49	     1		mov  dl,73
 000002BE  E8 00000000 E     1		call Gotoxy
 000002C3  5A		     1		pop  edx
					mwrite "score:"
 0000069A		     1		.data		
 0000069A 73 63 6F 72 65     1		??0013 BYTE "score:",0	
	   3A 00
 000002C4		     1		.code
 000002C4  52		     1		push	edx
 000002C5  BA 0000069A R     1		mov	edx,OFFSET ??0013
 000002CA  E8 00000000 E     1		call	WriteString
 000002CF  5A		     1		pop	edx
					mGotoXY diamondX, diamondY    ; print diamond
 000002D0  52		     1		push edx
 000002D1  8A 35 00000365 R  1		mov  dh,diamondY
 000002D7  8A 15 00000364 R  1		mov  dl,diamondX
 000002DD  E8 00000000 E     1		call Gotoxy
 000002E2  5A		     1		pop  edx
 000002E3  BA 00000369 R		mov edx, OFFSET diamond    ; print diamond
 000002E8  E8 00000000 E		call WriteString    ; print diamond
					.WHILE gamecontinue    ; begin game
						.IF (appearTreeA==0 || appearTreeB==0) && distanceCheck > 4   ; if there have no tree in screen
 0000030D  B8 00000006					mov eax, 6
 00000312  E8 00000000 E				call randomRange    ; print tree in randomRange
							.IF eax==1
 0000031C  C6 05 00000362 R					mov appearTreeA, 1
	   01
							.ENDIF
							.IF eax==3 || eax==4 || eax==5
 00000332  C6 05 00000363 R					mov appearTreeB, 1
	   01
							.ENDIF
 00000339  C6 05 00000376 R				mov distanceCheck, 0
	   00
						.ENDIF
 00000340  E8 00000000 E			call readkey    ; read keyboard input if available
						.IF al==20h    ; if equal to space
 00000349  B0 01					mov al, 1
 0000034B  A2 00000368 R				mov ifmovdiamond, al
 00000350  E8 000001F8					call movdiamond    ; move the diamond
						.ENDIF
 00000355  E8 00000452				call loopprint    ; continue print underground
 0000035A  B8 00000000				mov eax, 0
						.IF gamecontinue==0    ; game over
 00000368  C3						ret
						.ENDIF
 00000369  E8 00000796				call scoreCount
 0000036E  50					push eax
 0000036F  52					push edx
 00000370  53					push ebx
 00000371  BB 00000032				mov ebx, 50
 00000376  BA 00000000				mov edx, 0
 0000037B  A1 0000036D R			mov eax, score
 00000380  F7 F3				div ebx
 00000382  83 FA 00				cmp edx, 0
 00000385  75 0F				jnz Ladd
						.IF delayTime>10
 00000390  FF 0D 00000372 R				dec delayTime
						.ENDIF
 00000396				Ladd: 
 00000396  5B					pop ebx
 00000397  5A					pop edx
 00000398  58					pop eax
 00000399  E8 0000012E				call ifTouch
						.IF gamecontinue==0
 000003A7  C3						ret
						.ENDIF
 000003A8  FE 05 00000376 R			inc distanceCheck
					.ENDW
 000003BB  C3				ret
 000003BC			game ENDP

 000003BC			endgame PROC
 000003BC  E8 000000C7			call clearRet
					mGotoXY 35, 3
 000003C1  52		     1		push edx
 000003C2  B6 03	     1		mov  dh,3
 000003C4  B2 23	     1		mov  dl,35
 000003C6  E8 00000000 E     1		call Gotoxy
 000003CB  5A		     1		pop  edx
					mwrite ">-------------------<"
 000006A1		     1		.data		
 000006A1 3E 2D 2D 2D 2D     1		??0014 BYTE ">-------------------<",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   3C 00
 000003CC		     1		.code
 000003CC  52		     1		push	edx
 000003CD  BA 000006A1 R     1		mov	edx,OFFSET ??0014
 000003D2  E8 00000000 E     1		call	WriteString
 000003D7  5A		     1		pop	edx
					mGotoXY 35, 4
 000003D8  52		     1		push edx
 000003D9  B6 04	     1		mov  dh,4
 000003DB  B2 23	     1		mov  dl,35
 000003DD  E8 00000000 E     1		call Gotoxy
 000003E2  5A		     1		pop  edx
					mwrite ">     GAME OVER     <"
 000006B7		     1		.data		
 000006B7 3E 20 20 20 20     1		??0015 BYTE ">     GAME OVER     <",0	
	   20 47 41 4D 45
	   20 4F 56 45 52
	   20 20 20 20 20
	   3C 00
 000003E3		     1		.code
 000003E3  52		     1		push	edx
 000003E4  BA 000006B7 R     1		mov	edx,OFFSET ??0015
 000003E9  E8 00000000 E     1		call	WriteString
 000003EE  5A		     1		pop	edx
					mGotoXY 35, 5
 000003EF  52		     1		push edx
 000003F0  B6 05	     1		mov  dh,5
 000003F2  B2 23	     1		mov  dl,35
 000003F4  E8 00000000 E     1		call Gotoxy
 000003F9  5A		     1		pop  edx
					mwrite ">   Your score:     <"
 000006CD		     1		.data		
 000006CD 3E 20 20 20 59     1		??0016 BYTE ">   Your score:     <",0	
	   6F 75 72 20 73
	   63 6F 72 65 3A
	   20 20 20 20 20
	   3C 00
 000003FA		     1		.code
 000003FA  52		     1		push	edx
 000003FB  BA 000006CD R     1		mov	edx,OFFSET ??0016
 00000400  E8 00000000 E     1		call	WriteString
 00000405  5A		     1		pop	edx
					mGotoXY 51, 5
 00000406  52		     1		push edx
 00000407  B6 05	     1		mov  dh,5
 00000409  B2 33	     1		mov  dl,51
 0000040B  E8 00000000 E     1		call Gotoxy
 00000410  5A		     1		pop  edx
 00000411  A1 0000036D R		mov eax, score
 00000416  48				dec eax
 00000417  E8 00000000 E		call WriteDec
 0000041C  B8 00000000			mov eax, 0
 00000421  A3 0000036D R		mov score, eax
					mGotoXY 35, 6
 00000426  52		     1		push edx
 00000427  B6 06	     1		mov  dh,6
 00000429  B2 23	     1		mov  dl,35
 0000042B  E8 00000000 E     1		call Gotoxy
 00000430  5A		     1		pop  edx
					mwrite ">-------------------<"
 000006E3		     1		.data		
 000006E3 3E 2D 2D 2D 2D     1		??0017 BYTE ">-------------------<",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   3C 00
 00000431		     1		.code
 00000431  52		     1		push	edx
 00000432  BA 000006E3 R     1		mov	edx,OFFSET ??0017
 00000437  E8 00000000 E     1		call	WriteString
 0000043C  5A		     1		pop	edx
					mGotoXY 27, 8
 0000043D  52		     1		push edx
 0000043E  B6 08	     1		mov  dh,8
 00000440  B2 1B	     1		mov  dl,27
 00000442  E8 00000000 E     1		call Gotoxy
 00000447  5A		     1		pop  edx
					mwrite " <-------------------------------->"
 000006F9		     1		.data		
 000006F9 20 3C 2D 2D 2D     1		??0018 BYTE " <-------------------------------->",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 3E
	   00
 00000448		     1		.code
 00000448  52		     1		push	edx
 00000449  BA 000006F9 R     1		mov	edx,OFFSET ??0018
 0000044E  E8 00000000 E     1		call	WriteString
 00000453  5A		     1		pop	edx
					mGotoXY 27, 9
 00000454  52		     1		push edx
 00000455  B6 09	     1		mov  dh,9
 00000457  B2 1B	     1		mov  dl,27
 00000459  E8 00000000 E     1		call Gotoxy
 0000045E  5A		     1		pop  edx
					mwrite " < Do You Want To Try Again?(Y/N) >"
 0000071D		     1		.data		
 0000071D 20 3C 20 44 6F     1		??0019 BYTE " < Do You Want To Try Again?(Y/N) >",0	
	   20 59 6F 75 20
	   57 61 6E 74 20
	   54 6F 20 54 72
	   79 20 41 67 61
	   69 6E 3F 28 59
	   2F 4E 29 20 3E
	   00
 0000045F		     1		.code
 0000045F  52		     1		push	edx
 00000460  BA 0000071D R     1		mov	edx,OFFSET ??0019
 00000465  E8 00000000 E     1		call	WriteString
 0000046A  5A		     1		pop	edx
					mGotoXY 27, 10
 0000046B  52		     1		push edx
 0000046C  B6 0A	     1		mov  dh,10
 0000046E  B2 1B	     1		mov  dl,27
 00000470  E8 00000000 E     1		call Gotoxy
 00000475  5A		     1		pop  edx
					mwrite " <-------------------------------->"
 00000741		     1		.data		
 00000741 20 3C 2D 2D 2D     1		??001A BYTE " <-------------------------------->",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 3E
	   00
 00000476		     1		.code
 00000476  52		     1		push	edx
 00000477  BA 00000741 R     1		mov	edx,OFFSET ??001A
 0000047C  E8 00000000 E     1		call	WriteString
 00000481  5A		     1		pop	edx
 00000482  E8 00000000 E		call readchar
 00000487  C3				ret
 00000488			endgame ENDP

 00000488			clearRet PROC    ; reset
 00000488  B0 00			mov al, 0
 0000048A  A2 00000362 R		mov appearTreeA, al
 0000048F  A2 00000363 R		mov appearTreeB, al
 00000494  A2 00000366 R		mov diamondD, al
 00000499  A2 00000368 R		mov ifmovdiamond, al
 0000049E  A2 00000371 R		mov movcount, al
 000004A3  B0 01			mov al, 1
 000004A5  A2 0000031C R		mov gamecontinue, al
 000004AA  A2 00000367 R		mov diamondU, al
 000004AF  B0 16			mov al, 22
 000004B1  A2 00000364 R		mov diamondX, al
 000004B6  B0 0E			mov al, 14
 000004B8  A2 00000365 R		mov diamondY, al
 000004BD  B0 4B			mov al, 75
 000004BF  A2 0000034C R		mov treeA.linex, al
 000004C4  B0 53			mov al, 83
 000004C6  A2 00000361 R		mov treeB.linex, al
 000004CB  C3				ret
 000004CC			clearRet ENDP

 000004CC			ifTouch PROC    ; 判斷是否有跟出現的樹撞在一起
					.IF appearTreeA    ; 如果是 treeA 出現的話
 000004D5  A0 0000034C R			mov al, treeA.linex
 000004DA  A2 0000036C R			mov tmp, al
 000004DF  80 05 0000036C R			add tmp, 8
	   08
 000004E6  A0 00000364 R			mov al, diamondX
						.IF al>=treeA.linex && al<=tmp
							.IF diamondY>10
 00000504  C6 05 0000031C R					mov gamecontinue, 0
	   00
 0000050B  C3							ret
							.ENDIF
						.ENDIF
					.ENDIF
					.IF appearTreeB    ; 如果是 treeB 出現的話
 00000515  A0 00000361 R			mov al, treeB.linex 
 0000051A  A2 0000036C R			mov tmp, al
 0000051F  80 05 0000036C R			add tmp, 4
	   04
 00000526  A0 00000364 R			mov al, diamondX
						.IF al>treeB.linex && al<tmp
							.IF diamondY>12
 00000544  C6 05 0000031C R					mov gamecontinue, 0
	   00
 0000054B  C3							ret
							.ENDIF
						.ENDIF
					.ENDIF
 0000054C  C3				ret
 0000054D			ifTouch ENDP

 0000054D			movdiamond PROC    ; 小恐龍的移動
					.IF movcount==20
 00000556  B0 00				mov al, 0
 00000558  A2 00000368 R			mov ifmovdiamond, al
 0000055D  A2 00000371 R			mov movcount, al
 00000562  C3					ret
					.ENDIF
					.IF diamondU
						mGotoXY diamondX, diamondY
 0000056C  52		     1		push edx
 0000056D  8A 35 00000365 R  1		mov  dh,diamondY
 00000573  8A 15 00000364 R  1		mov  dl,diamondX
 00000579  E8 00000000 E     1		call Gotoxy
 0000057E  5A		     1		pop  edx
						mWrite "  "    ; 將原本的蓋掉
 00000765		     1		.data		
 00000765 20 20 00	     1		??001B BYTE "  ",0	
 0000057F		     1		.code
 0000057F  52		     1		push	edx
 00000580  BA 00000765 R     1		mov	edx,OFFSET ??001B
 00000585  E8 00000000 E     1		call	WriteString
 0000058A  5A		     1		pop	edx
 0000058B  FE 0D 00000365 R			dec diamondY
						mGotoXY diamondX, diamondY
 00000591  52		     1		push edx
 00000592  8A 35 00000365 R  1		mov  dh,diamondY
 00000598  8A 15 00000364 R  1		mov  dl,diamondX
 0000059E  E8 00000000 E     1		call Gotoxy
 000005A3  5A		     1		pop  edx
 000005A4  BA 00000369 R			mov edx, OFFSET diamond
 000005A9  E8 00000000 E			call WriteString
 000005AE  FE 05 00000371 R			inc movcount
					.ENDIF
					.IF diamondY==5    ; 在最高點就改往下了
 000005BD  C6 05 00000366 R			mov diamondD, 1
	   01
 000005C4  C6 05 00000367 R			mov diamondU, 0
	   00
					.ENDIF
					.IF diamondD
						mGotoXY diamondX, diamondY
 000005D4  52		     1		push edx
 000005D5  8A 35 00000365 R  1		mov  dh,diamondY
 000005DB  8A 15 00000364 R  1		mov  dl,diamondX
 000005E1  E8 00000000 E     1		call Gotoxy
 000005E6  5A		     1		pop  edx
						mWrite "  "
 00000768		     1		.data		
 00000768 20 20 00	     1		??001C BYTE "  ",0	
 000005E7		     1		.code
 000005E7  52		     1		push	edx
 000005E8  BA 00000768 R     1		mov	edx,OFFSET ??001C
 000005ED  E8 00000000 E     1		call	WriteString
 000005F2  5A		     1		pop	edx
 000005F3  FE 05 00000365 R			inc diamondY
						mGotoXY diamondX, diamondY
 000005F9  52		     1		push edx
 000005FA  8A 35 00000365 R  1		mov  dh,diamondY
 00000600  8A 15 00000364 R  1		mov  dl,diamondX
 00000606  E8 00000000 E     1		call Gotoxy
 0000060B  5A		     1		pop  edx
 0000060C  BA 00000369 R			mov edx, OFFSET diamond
 00000611  E8 00000000 E			call WriteString
 00000616  FE 05 00000371 R			inc movcount
					.ENDIF
					.IF diamondY==15
 00000625  C6 05 00000366 R			mov diamondD, 0
	   00
 0000062C  C6 05 00000367 R			mov diamondU, 1
	   01
					.ENDIF
 00000633  C3				ret
 00000634			movdiamond ENDP

 00000634			printTreeA PROC    ; 將 treeA 印出
					mGotoXY treea.linex, 10
 00000634  52		     1		push edx
 00000635  B6 0A	     1		mov  dh,10
 00000637  8A 15 0000034C R  1		mov  dl,treea.linex
 0000063D  E8 00000000 E     1		call Gotoxy
 00000642  5A		     1		pop  edx
 00000643  BA 0000031D R		mov edx, OFFSET treeA.line1
 00000648  E8 00000000 E		call WriteString
					mGotoXY treea.linex, 11
 0000064D  52		     1		push edx
 0000064E  B6 0B	     1		mov  dh,11
 00000650  8A 15 0000034C R  1		mov  dl,treea.linex
 00000656  E8 00000000 E     1		call Gotoxy
 0000065B  5A		     1		pop  edx
 0000065C  BA 00000325 R		mov edx, OFFSET treeA.line2
 00000661  E8 00000000 E		call WriteString
					mGotoXY treea.linex, 12
 00000666  52		     1		push edx
 00000667  B6 0C	     1		mov  dh,12
 00000669  8A 15 0000034C R  1		mov  dl,treea.linex
 0000066F  E8 00000000 E     1		call Gotoxy
 00000674  5A		     1		pop  edx
 00000675  BA 0000032E R		mov edx, OFFSET treeA.line3
 0000067A  E8 00000000 E		call WriteString
					mGotoXY treea.linex, 13
 0000067F  52		     1		push edx
 00000680  B6 0D	     1		mov  dh,13
 00000682  8A 15 0000034C R  1		mov  dl,treea.linex
 00000688  E8 00000000 E     1		call Gotoxy
 0000068D  5A		     1		pop  edx
 0000068E  BA 00000338 R		mov edx, OFFSET treeA.line4
 00000693  E8 00000000 E		call WriteString
					mGotoXY treea.linex, 14
 00000698  52		     1		push edx
 00000699  B6 0E	     1		mov  dh,14
 0000069B  8A 15 0000034C R  1		mov  dl,treea.linex
 000006A1  E8 00000000 E     1		call Gotoxy
 000006A6  5A		     1		pop  edx
 000006A7  BA 00000343 R		mov edx, OFFSET treeA.line5
 000006AC  E8 00000000 E		call WriteString
 000006B1  C3				ret
 000006B2			printTreeA ENDP

 000006B2			clearTree PROC    ; 當樹移動到畫面最左邊後，清除樹的動作
					mGotoXY 1, 10
 000006B2  52		     1		push edx
 000006B3  B6 0A	     1		mov  dh,10
 000006B5  B2 01	     1		mov  dl,1
 000006B7  E8 00000000 E     1		call Gotoxy
 000006BC  5A		     1		pop  edx
					mWrite "        "
 0000076B		     1		.data		
 0000076B 20 20 20 20 20     1		??001D BYTE "        ",0	
	   20 20 20 00
 000006BD		     1		.code
 000006BD  52		     1		push	edx
 000006BE  BA 0000076B R     1		mov	edx,OFFSET ??001D
 000006C3  E8 00000000 E     1		call	WriteString
 000006C8  5A		     1		pop	edx
					mGotoXY 1, 11
 000006C9  52		     1		push edx
 000006CA  B6 0B	     1		mov  dh,11
 000006CC  B2 01	     1		mov  dl,1
 000006CE  E8 00000000 E     1		call Gotoxy
 000006D3  5A		     1		pop  edx
					mWrite "        "
 00000774		     1		.data		
 00000774 20 20 20 20 20     1		??001E BYTE "        ",0	
	   20 20 20 00
 000006D4		     1		.code
 000006D4  52		     1		push	edx
 000006D5  BA 00000774 R     1		mov	edx,OFFSET ??001E
 000006DA  E8 00000000 E     1		call	WriteString
 000006DF  5A		     1		pop	edx
					mGotoXY 1, 12
 000006E0  52		     1		push edx
 000006E1  B6 0C	     1		mov  dh,12
 000006E3  B2 01	     1		mov  dl,1
 000006E5  E8 00000000 E     1		call Gotoxy
 000006EA  5A		     1		pop  edx
					mWrite "        "
 0000077D		     1		.data		
 0000077D 20 20 20 20 20     1		??001F BYTE "        ",0	
	   20 20 20 00
 000006EB		     1		.code
 000006EB  52		     1		push	edx
 000006EC  BA 0000077D R     1		mov	edx,OFFSET ??001F
 000006F1  E8 00000000 E     1		call	WriteString
 000006F6  5A		     1		pop	edx
					mGotoXY 1, 13
 000006F7  52		     1		push edx
 000006F8  B6 0D	     1		mov  dh,13
 000006FA  B2 01	     1		mov  dl,1
 000006FC  E8 00000000 E     1		call Gotoxy
 00000701  5A		     1		pop  edx
					mWrite "        "
 00000786		     1		.data		
 00000786 20 20 20 20 20     1		??0020 BYTE "        ",0	
	   20 20 20 00
 00000702		     1		.code
 00000702  52		     1		push	edx
 00000703  BA 00000786 R     1		mov	edx,OFFSET ??0020
 00000708  E8 00000000 E     1		call	WriteString
 0000070D  5A		     1		pop	edx
					mGotoXY 1, 14
 0000070E  52		     1		push edx
 0000070F  B6 0E	     1		mov  dh,14
 00000711  B2 01	     1		mov  dl,1
 00000713  E8 00000000 E     1		call Gotoxy
 00000718  5A		     1		pop  edx
					mWrite "________"
 0000078F		     1		.data		
 0000078F 5F 5F 5F 5F 5F     1		??0021 BYTE "________",0	
	   5F 5F 5F 00
 00000719		     1		.code
 00000719  52		     1		push	edx
 0000071A  BA 0000078F R     1		mov	edx,OFFSET ??0021
 0000071F  E8 00000000 E     1		call	WriteString
 00000724  5A		     1		pop	edx
 00000725  C3				ret
 00000726			clearTree ENDP

 00000726			printTreeB PROC    ; 將 treeA 印出
					mGotoXY treeB.linex, 12
 00000726  52		     1		push edx
 00000727  B6 0C	     1		mov  dh,12
 00000729  8A 15 00000361 R  1		mov  dl,treeB.linex
 0000072F  E8 00000000 E     1		call Gotoxy
 00000734  5A		     1		pop  edx
 00000735  BA 0000034D R		mov edx, OFFSET treeB.line1
 0000073A  E8 00000000 E		call WriteString
					mGotoXY treeB.linex, 13
 0000073F  52		     1		push edx
 00000740  B6 0D	     1		mov  dh,13
 00000742  8A 15 00000361 R  1		mov  dl,treeB.linex
 00000748  E8 00000000 E     1		call Gotoxy
 0000074D  5A		     1		pop  edx
 0000074E  BA 00000353 R		mov edx, OFFSET treeB.line2
 00000753  E8 00000000 E		call WriteString
					mGotoXY treeB.linex, 14
 00000758  52		     1		push edx
 00000759  B6 0E	     1		mov  dh,14
 0000075B  8A 15 00000361 R  1		mov  dl,treeB.linex
 00000761  E8 00000000 E     1		call Gotoxy
 00000766  5A		     1		pop  edx
 00000767  BA 0000035A R		mov edx, OFFSET treeB.line3
 0000076C  E8 00000000 E		call WriteString
 00000771  C3				ret
 00000772			printTreeB ENDP

 00000772			printBackground PROC    ; 印出背景的框框
 00000772  B9 0000000D			mov ecx, 13
 00000777  BA 00000000 R		mov edx, offset beginbackground1
 0000077C  E8 00000000 E		call writestring
 00000781  BA 0000005D R		mov edx, offset beginbackground2
 00000786				L1:
 00000786  E8 00000000 E			call writestring
 0000078B  E2 F9				Loop L1
 0000078D  BA 000000BA R		mov edx, offset underground1
 00000792  E8 00000000 E		call writestring
 00000797  BA 0000028B R		mov edx, offset underground2_5
 0000079C  E8 00000000 E		call writestring
 000007A1  BA 00000000 R		mov edx,offset beginbackground1
 000007A6  E8 00000000 E		call writestring
 000007AB  C3				ret
 000007AC			printBackground ENDP

 000007AC			loopprint PROC
				; 地板移動效果
				; 順便將 樹移動效果 以及 小恐龍移動判斷 寫在這裡
				; 隨著地板移動一次，樹以及小恐龍（若是有要移動的話）也移動一次
				; 最後還有加上是否有碰撞到一起的判斷
				; 因懶所以重複的程式碼沒有使用 marco 而是選擇複製黏貼
				; 總體來講相似的程式碼在做的事情是一樣的

					mGotoXY 0, 15    ; 此類為地板移動效果
 000007AC  52		     1		push edx
 000007AD  B6 0F	     1		mov  dh,15
 000007AF  B2 00	     1		mov  dl,0
 000007B1  E8 00000000 E     1		call Gotoxy
 000007B6  5A		     1		pop  edx
 000007B7  A1 00000372 R		mov eax, delayTime
 000007BC  BA 00000117 R		mov edx, offset underground2_1
 000007C1  E8 00000000 E		call writestring
					mGotoXY 0, 17

 000007C6  52		     1		push edx
 000007C7  B6 11	     1		mov  dh,17
 000007C9  B2 00	     1		mov  dl,0
 000007CB  E8 00000000 E     1		call Gotoxy
 000007D0  5A		     1		pop  edx
 000007D1  E8 00000000 E		call delay

					.IF appearTreeA    ;此類為樹移動效果
 000007DF  80 3D 0000034C R			cmp treeA.linex, 1
	   01
 000007E6  72 0D				jb L2
 000007E8  E8 FFFFFE47				call printTreeA
 000007ED  FE 0D 0000034C R			dec treeA.linex
 000007F3  EB 13				jmp L3
 000007F5					L2:
 000007F5  C6 05 0000034C R				mov treeA.linex, 76
	   4C
 000007FC  E8 FFFFFEB1					call clearTree
 00000801  C6 05 00000362 R				mov appearTreeA, 0
	   00
 00000808					L3:
					.ENDIF
					.IF appearTreeB
 00000811  80 3D 00000361 R			cmp treeB.linex, 1
	   01
 00000818  72 0D				jb L12
 0000081A  E8 FFFFFF07				call printTreeB
 0000081F  FE 0D 00000361 R			dec treeB.linex
 00000825  EB 13				jmp L13
 00000827					L12:
 00000827  C6 05 00000361 R				mov treeB.linex, 76
	   4C
 0000082E  E8 FFFFFE7F					call clearTree
 00000833  C6 05 00000363 R				mov appearTreeB, 0
	   00
 0000083A					L13:
					.ENDIF
					.IF ifmovdiamond    ;此類為小恐龍移動效果
 00000843  E8 FFFFFD05				call movdiamond
					.ENDIF
 00000848  E8 FFFFFC7F			call ifTouch    ; 每移動一次，都要判斷一次是否有碰撞到
					.IF gamecontinue==0
 00000856  C3					ret
					.ENDIF

					mGotoXY 0, 15
 00000857  52		     1		push edx
 00000858  B6 0F	     1		mov  dh,15
 0000085A  B2 00	     1		mov  dl,0
 0000085C  E8 00000000 E     1		call Gotoxy
 00000861  5A		     1		pop  edx
 00000862  A1 00000372 R		mov eax, delayTime
 00000867  BA 00000174 R		mov edx, offset underground2_2
 0000086C  E8 00000000 E		call writestring
					mGotoXY 0, 17
 00000871  52		     1		push edx
 00000872  B6 11	     1		mov  dh,17
 00000874  B2 00	     1		mov  dl,0
 00000876  E8 00000000 E     1		call Gotoxy
 0000087B  5A		     1		pop  edx
 0000087C  E8 00000000 E		call delay

					.IF appearTreeA
 0000088A  80 3D 0000034C R			cmp treeA.linex, 1
	   01
 00000891  72 0D				jb L4
 00000893  E8 FFFFFD9C				call printTreeA
 00000898  FE 0D 0000034C R			dec treeA.linex
 0000089E  EB 13				jmp L5
 000008A0					L4:
 000008A0  C6 05 0000034C R				mov treeA.linex, 76
	   4C
 000008A7  E8 FFFFFE06					call clearTree
 000008AC  C6 05 00000362 R				mov appearTreeA, 0
	   00
 000008B3					L5:
					.ENDIF
					.IF appearTreeB
 000008BC  80 3D 00000361 R			cmp treeB.linex, 1
	   01
 000008C3  72 0D				jb L14
 000008C5  E8 FFFFFE5C				call printTreeB
 000008CA  FE 0D 00000361 R			dec treeB.linex
 000008D0  EB 13				jmp L15
 000008D2					L14:
 000008D2  C6 05 00000361 R				mov treeB.linex, 76
	   4C
 000008D9  E8 FFFFFDD4					call clearTree
 000008DE  C6 05 00000363 R				mov appearTreeB, 0
	   00
 000008E5					L15:
					.ENDIF
					.IF ifmovdiamond
 000008EE  E8 FFFFFC5A				call movdiamond
					.ENDIF
 000008F3  E8 FFFFFBD4			call ifTouch
					.IF gamecontinue==0
 00000901  C3					ret
					.ENDIF

					mGotoXY 0, 15
 00000902  52		     1		push edx
 00000903  B6 0F	     1		mov  dh,15
 00000905  B2 00	     1		mov  dl,0
 00000907  E8 00000000 E     1		call Gotoxy
 0000090C  5A		     1		pop  edx
 0000090D  A1 00000372 R		mov eax, delayTime
 00000912  BA 000001D1 R		mov edx, offset underground2_3
 00000917  E8 00000000 E		call writestring
					mGotoXY 0, 17
 0000091C  52		     1		push edx
 0000091D  B6 11	     1		mov  dh,17
 0000091F  B2 00	     1		mov  dl,0
 00000921  E8 00000000 E     1		call Gotoxy
 00000926  5A		     1		pop  edx
 00000927  E8 00000000 E		call delay

					.IF appearTreeA
 00000935  80 3D 0000034C R			cmp treeA.linex, 1
	   01
 0000093C  72 0D				jb L6
 0000093E  E8 FFFFFCF1				call printTreeA
 00000943  FE 0D 0000034C R			dec treeA.linex
 00000949  EB 13				jmp L7
 0000094B					L6:
 0000094B  C6 05 0000034C R				mov treeA.linex, 76
	   4C
 00000952  E8 FFFFFD5B					call clearTree
 00000957  C6 05 00000362 R				mov appearTreeA, 0
	   00
 0000095E					L7:
					.ENDIF
					.IF appearTreeB
 00000967  80 3D 00000361 R			cmp treeB.linex, 1
	   01
 0000096E  72 0D				jb L16
 00000970  E8 FFFFFDB1				call printTreeB
 00000975  FE 0D 00000361 R			dec treeB.linex
 0000097B  EB 13				jmp L17
 0000097D					L16:
 0000097D  C6 05 00000361 R				mov treeB.linex, 76
	   4C
 00000984  E8 FFFFFD29					call clearTree
 00000989  C6 05 00000363 R				mov appearTreeB, 0
	   00
 00000990					L17:
					.ENDIF
					.IF ifmovdiamond
 00000999  E8 FFFFFBAF				call movdiamond
					.ENDIF
 0000099E  E8 FFFFFB29			call ifTouch
					.IF gamecontinue==0
 000009AC  C3					ret
					.ENDIF

					mGotoXY 0, 15
 000009AD  52		     1		push edx
 000009AE  B6 0F	     1		mov  dh,15
 000009B0  B2 00	     1		mov  dl,0
 000009B2  E8 00000000 E     1		call Gotoxy
 000009B7  5A		     1		pop  edx
 000009B8  A1 00000372 R		mov eax, delayTime
 000009BD  BA 0000022E R		mov edx, offset underground2_4
 000009C2  E8 00000000 E		call writestring
					mGotoXY 0, 17
 000009C7  52		     1		push edx
 000009C8  B6 11	     1		mov  dh,17
 000009CA  B2 00	     1		mov  dl,0
 000009CC  E8 00000000 E     1		call Gotoxy
 000009D1  5A		     1		pop  edx
 000009D2  E8 00000000 E		call delay

					.IF appearTreeA
 000009E0  80 3D 0000034C R			cmp treeA.linex, 1
	   01
 000009E7  72 0D				jb L8
 000009E9  E8 FFFFFC46				call printTreeA
 000009EE  FE 0D 0000034C R			dec treeA.linex
 000009F4  EB 13				jmp L9
 000009F6					L8:
 000009F6  C6 05 0000034C R				mov treeA.linex, 76
	   4C
 000009FD  E8 FFFFFCB0					call clearTree
 00000A02  C6 05 00000362 R				mov appearTreeA, 0
	   00
 00000A09					L9:
					.ENDIF
					.IF appearTreeB
 00000A12  80 3D 00000361 R			cmp treeB.linex, 1
	   01
 00000A19  72 0D				jb L18
 00000A1B  E8 FFFFFD06				call printTreeB
 00000A20  FE 0D 00000361 R			dec treeB.linex
 00000A26  EB 13				jmp L19
 00000A28					L18:
 00000A28  C6 05 00000361 R				mov treeB.linex, 76
	   4C
 00000A2F  E8 FFFFFC7E					call clearTree
 00000A34  C6 05 00000363 R				mov appearTreeB, 0
	   00
 00000A3B					L19:
					.ENDIF
					.IF ifmovdiamond
 00000A44  E8 FFFFFB04				call movdiamond
					.ENDIF
 00000A49  E8 FFFFFA7E			call ifTouch
					.IF gamecontinue==0
 00000A57  C3					ret
					.ENDIF

					mGotoXY 0, 15
 00000A58  52		     1		push edx
 00000A59  B6 0F	     1		mov  dh,15
 00000A5B  B2 00	     1		mov  dl,0
 00000A5D  E8 00000000 E     1		call Gotoxy
 00000A62  5A		     1		pop  edx
 00000A63  A1 00000372 R		mov eax, delayTime
 00000A68  BA 0000028B R		mov edx, offset underground2_5
 00000A6D  E8 00000000 E		call writestring
					mGotoXY 0, 17
 00000A72  52		     1		push edx
 00000A73  B6 11	     1		mov  dh,17
 00000A75  B2 00	     1		mov  dl,0
 00000A77  E8 00000000 E     1		call Gotoxy
 00000A7C  5A		     1		pop  edx
 00000A7D  E8 00000000 E		call delay

					.IF appearTreeA
 00000A8B  80 3D 0000034C R			cmp treeA.linex, 1
	   01
 00000A92  72 0D				jb L10
 00000A94  E8 FFFFFB9B				call printTreeA
 00000A99  FE 0D 0000034C R			dec treeA.linex
 00000A9F  EB 13				jmp L11
 00000AA1					L10:
 00000AA1  C6 05 0000034C R				mov treeA.linex, 76
	   4C
 00000AA8  E8 FFFFFC05					call clearTree
 00000AAD  C6 05 00000362 R				mov appearTreeA, 0
	   00
 00000AB4					L11:
					.ENDIF
					.IF appearTreeB
 00000ABD  80 3D 00000361 R			cmp treeB.linex, 1
	   01
 00000AC4  72 0D				jb L20
 00000AC6  E8 FFFFFC5B				call printTreeB
 00000ACB  FE 0D 00000361 R			dec treeB.linex
 00000AD1  EB 13				jmp L21
 00000AD3					L20:
 00000AD3  C6 05 00000361 R				mov treeB.linex, 76
	   4C
 00000ADA  E8 FFFFFBD3					call clearTree
 00000ADF  C6 05 00000363 R				mov appearTreeB, 0
	   00
 00000AE6					L21:
					.ENDIF
					.IF ifmovdiamond
 00000AEF  E8 FFFFFA59				call movdiamond
					.ENDIF
 00000AF4  E8 FFFFF9D3			call ifTouch
					.IF gamecontinue==0
 00000B02  C3					ret
					.ENDIF

 00000B03  C3				ret
 00000B04			loopprint ENDP

 00000B04			scoreCount PROC    ; 做計分的動作
					mGotoXY 80 , 1
 00000B04  52		     1		push edx
 00000B05  B6 01	     1		mov  dh,1
 00000B07  B2 50	     1		mov  dl,80
 00000B09  E8 00000000 E     1		call Gotoxy
 00000B0E  5A		     1		pop  edx
 00000B0F  A1 0000036D R		mov eax, score
 00000B14  E8 00000000 E		call WriteDec
 00000B19  FF 05 0000036D R		inc score
 00000B1F  C3				ret
 00000B20			scoreCount ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30136.0	    01/19/22 13:13:52
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
Tree1  . . . . . . . . . . . . .	 00000030
  line1  . . . . . . . . . . . .	 00000000	 Byte
  line2  . . . . . . . . . . . .	 00000008	 Byte
  line3  . . . . . . . . . . . .	 00000011	 Byte
  line4  . . . . . . . . . . . .	 0000001B	 Byte
  line5  . . . . . . . . . . . .	 00000026	 Byte
  linex  . . . . . . . . . . . .	 0000002F	 Byte
Tree2  . . . . . . . . . . . . .	 00000015
  line1  . . . . . . . . . . . .	 00000000	 Byte
  line2  . . . . . . . . . . . .	 00000006	 Byte
  line3  . . . . . . . . . . . .	 0000000D	 Byte
  linex  . . . . . . . . . . . .	 00000014	 Byte
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000798 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000B20 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
clearRet . . . . . . . . . . . .	P Near	 00000488 _TEXT	Length= 00000044 Public STDCALL
clearTree  . . . . . . . . . . .	P Near	 000006B2 _TEXT	Length= 00000074 Public STDCALL
endgame  . . . . . . . . . . . .	P Near	 000003BC _TEXT	Length= 000000CC Public STDCALL
game . . . . . . . . . . . . . .	P Near	 000002B4 _TEXT	Length= 00000108 Public STDCALL
  Ladd . . . . . . . . . . . . .	L Near	 00000396 _TEXT	
ifTouch  . . . . . . . . . . . .	P Near	 000004CC _TEXT	Length= 00000081 Public STDCALL
loopprint  . . . . . . . . . . .	P Near	 000007AC _TEXT	Length= 00000358 Public STDCALL
  L2 . . . . . . . . . . . . . .	L Near	 000007F5 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000808 _TEXT	
  L12  . . . . . . . . . . . . .	L Near	 00000827 _TEXT	
  L13  . . . . . . . . . . . . .	L Near	 0000083A _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 000008A0 _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 000008B3 _TEXT	
  L14  . . . . . . . . . . . . .	L Near	 000008D2 _TEXT	
  L15  . . . . . . . . . . . . .	L Near	 000008E5 _TEXT	
  L6 . . . . . . . . . . . . . .	L Near	 0000094B _TEXT	
  L7 . . . . . . . . . . . . . .	L Near	 0000095E _TEXT	
  L16  . . . . . . . . . . . . .	L Near	 0000097D _TEXT	
  L17  . . . . . . . . . . . . .	L Near	 00000990 _TEXT	
  L8 . . . . . . . . . . . . . .	L Near	 000009F6 _TEXT	
  L9 . . . . . . . . . . . . . .	L Near	 00000A09 _TEXT	
  L18  . . . . . . . . . . . . .	L Near	 00000A28 _TEXT	
  L19  . . . . . . . . . . . . .	L Near	 00000A3B _TEXT	
  L10  . . . . . . . . . . . . .	L Near	 00000AA1 _TEXT	
  L11  . . . . . . . . . . . . .	L Near	 00000AB4 _TEXT	
  L20  . . . . . . . . . . . . .	L Near	 00000AD3 _TEXT	
  L21  . . . . . . . . . . . . .	L Near	 00000AE6 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007A Public STDCALL
  g  . . . . . . . . . . . . . .	L Near	 00000000 _TEXT	
movdiamond . . . . . . . . . . .	P Near	 0000054D _TEXT	Length= 000000E7 Public STDCALL
printBackground  . . . . . . . .	P Near	 00000772 _TEXT	Length= 0000003A Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000786 _TEXT	
printTreeA . . . . . . . . . . .	P Near	 00000634 _TEXT	Length= 0000007E Public STDCALL
printTreeB . . . . . . . . . . .	P Near	 00000726 _TEXT	Length= 0000004C Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
rule . . . . . . . . . . . . . .	P Near	 0000007A _TEXT	Length= 00000087 Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scoreCount . . . . . . . . . . .	P Near	 00000B04 _TEXT	Length= 0000001C Public STDCALL
selectDefc . . . . . . . . . . .	P Near	 00000101 _TEXT	Length= 000001B3 Public STDCALL
  C1 . . . . . . . . . . . . . .	L Near	 0000019A _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000377 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0000039B _DATA	
??0002 . . . . . . . . . . . . .	Byte	 000003B8 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000003D5 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000003F2 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00000426 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000045C _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00000492 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 000004C8 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 000004FE _DATA	
??000A . . . . . . . . . . . . .	Byte	 00000534 _DATA	
??000B . . . . . . . . . . . . .	Byte	 0000056A _DATA	
??000C . . . . . . . . . . . . .	Byte	 000005A0 _DATA	
??000D . . . . . . . . . . . . .	Byte	 000005D6 _DATA	
??000E . . . . . . . . . . . . .	Byte	 000005E2 _DATA	
??000F . . . . . . . . . . . . .	Byte	 000005EE _DATA	
??0010 . . . . . . . . . . . . .	Byte	 000005F8 _DATA	
??0011 . . . . . . . . . . . . .	Byte	 0000062E _DATA	
??0012 . . . . . . . . . . . . .	Byte	 00000664 _DATA	
??0013 . . . . . . . . . . . . .	Byte	 0000069A _DATA	
??0014 . . . . . . . . . . . . .	Byte	 000006A1 _DATA	
??0015 . . . . . . . . . . . . .	Byte	 000006B7 _DATA	
??0016 . . . . . . . . . . . . .	Byte	 000006CD _DATA	
??0017 . . . . . . . . . . . . .	Byte	 000006E3 _DATA	
??0018 . . . . . . . . . . . . .	Byte	 000006F9 _DATA	
??0019 . . . . . . . . . . . . .	Byte	 0000071D _DATA	
??001A . . . . . . . . . . . . .	Byte	 00000741 _DATA	
??001B . . . . . . . . . . . . .	Byte	 00000765 _DATA	
??001C . . . . . . . . . . . . .	Byte	 00000768 _DATA	
??001D . . . . . . . . . . . . .	Byte	 0000076B _DATA	
??001E . . . . . . . . . . . . .	Byte	 00000774 _DATA	
??001F . . . . . . . . . . . . .	Byte	 0000077D _DATA	
??0020 . . . . . . . . . . . . .	Byte	 00000786 _DATA	
??0021 . . . . . . . . . . . . .	Byte	 0000078F _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
appearTreeA  . . . . . . . . . .	Byte	 00000362 _DATA	
appearTreeB  . . . . . . . . . .	Byte	 00000363 _DATA	
beginbackground1 . . . . . . . .	Byte	 00000000 _DATA	
beginbackground2 . . . . . . . .	Byte	 0000005D _DATA	
beginmessenge1 . . . . . . . . .	Byte	 000002E8 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
delayTime  . . . . . . . . . . .	DWord	 00000372 _DATA	
diamondD . . . . . . . . . . . .	Byte	 00000366 _DATA	
diamondU . . . . . . . . . . . .	Byte	 00000367 _DATA	
diamondX . . . . . . . . . . . .	Byte	 00000364 _DATA	
diamondY . . . . . . . . . . . .	Byte	 00000365 _DATA	
diamond  . . . . . . . . . . . .	Byte	 00000369 _DATA	
distanceCheck  . . . . . . . . .	Byte	 00000376 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gamecontinue . . . . . . . . . .	Byte	 0000031C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
ifmovdiamond . . . . . . . . . .	Byte	 00000368 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
movcount . . . . . . . . . . . .	Byte	 00000371 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	DWord	 0000036D _DATA	
tmp  . . . . . . . . . . . . . .	Byte	 0000036C _DATA	
treeA  . . . . . . . . . . . . .	Tree1	 0000031D _DATA	
treeB  . . . . . . . . . . . . .	Tree2	 0000034D _DATA	
underground1 . . . . . . . . . .	Byte	 000000BA _DATA	
underground2_1 . . . . . . . . .	Byte	 00000117 _DATA	
underground2_2 . . . . . . . . .	Byte	 00000174 _DATA	
underground2_3 . . . . . . . . .	Byte	 000001D1 _DATA	
underground2_4 . . . . . . . . .	Byte	 0000022E _DATA	
underground2_5 . . . . . . . . .	Byte	 0000028B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
